# -*- Mode: POLY-ORG;  -*- ---
#+PROPERTY: literate-lang lisp
#+PROPERTY: literate-load yes
#+OPTIONS: html-postamble:nil
#+OPTIONS: ^:nil

#+Author: Alan Ruttenberg
#+Title: Fix Owldoc

* Generating OWLDOC

** Protege's export of OWLDOC is buggy

OWLDoc generated by Protege is buggy.  The intention is to have 3 panes
(nav,subnav,content). One chooses among types of entities, one lists all
the entities of that type and one shows the content for a term - the
definition, annotation, axioms, usages, etc.

However, the navigation is broken. A click in nav should change subnav,
a click in subnav should change content.  A click in content should
change content. But the href targets are not set, so any click just
navigates in it's own subpane.

** Ressurect co-odes's ontology browser

The OWLDoc base is ontology-browser, which I modify
https://github.com/alanruttenberg/ontology-browser.git

This has the benefit of being able to be customized, and also
lets one enable the hierarchical views.

** Structure of the directory

OWLDoc writes out it's files into a directory, with one file for each
term, directories for each of the entity types, and auxiliary
directories, for e.g. css. There's a js directory but the javascript
isn't used.

OWLDoc
  ontologies
  classes
  objectproperties
  dataproperties
  annotationproperties
  individuals
  datatypes
  css 

Each directory, including top-level, has an index.html. The top-level is
the frameset. In the subdirectories are list of entities. The top-level
index-all.html lists all entities of all types. contents.html is initial
state of the content frame, which is the ontology
information. index.html is the starting point. In the ontologies directory
There's a index for the ontology called <ontology-name>__<number>.html. Finally,
each of the type subdirectories has a file per term and its own 
index-<ontology-name>.html

While the browser is built to support multiple ontologies, I haven't
made that work.  Instead, we'll arrange things so that the browser shows
one and only one ontology, and avoid use of frames.

To do this we'll have to 

1) Delete the superfluous index files.
2) Rewrite the links to index.html in the term pages to point to the
   ontology-specific index.
3) Create a new index.html in the root that redirects to the ontology summary view.

Ideally we could then package the whole directory into some kind of
portable web archive.  Unfortunately I haven't yet found a way of doing
this yet.

TBD: 
- Ability to configure a set of priority-order label properties.
- Allow reasoning so inferred axioms can also be shown
- Enable imports or automatically create merged file

** Compiling, installing

#+begin_src sh load no
git clone https://github.com/alanruttenberg/ontology-browser.git
cd ontology-browser
make
#+end_src

This installs the jar files into the local maven repository.

** Running

To generate the OWLDoc:
#+begin_src lisp load no :exports both :results replace
(create-owldoc <path-to-ontology> <name-of-owldoc-directory>)
#+end_src

Note that if there's already an OWLDoc at the owldoc directory, it won't
be overwritten.  Currently, imports are not processed, so create a
merged OWL file, possibly reasoned, for this purpose.

E.g.

#+begin_src lisp load no :exports both :results replace
(create-owldoc "~/repos/bfo-2020/21838-2/owl/bfo-2020.owl" "~/Desktop/bfo-owldoc/")
(defun export-imh (&optional ont dest)
  (create-owldoc "~/Desktop/merged.owl" "~/Desktop/imh-ontology/"))
#+end_src

** Implementation  

*** Load the libraries on demand.

#+begin_src lisp 
(defvar *owldoc-libraries-loaded* nil)

(defun maybe-load-owldoc-library ()
  (multiple-value-bind (res errorp)
      (ignore-errors
       (unless *owldoc-libraries-loaded*
         (add-to-classpath (split-at-char (abcl-asdf::resolve  "edu.stanford.protege/ontology-browser-owlbrowser/4.3.1-SNAPSHOT") #\:))
         (setq *owldoc-libraries-loaded* t)))
    (assert (not errorp) () "The ontology-browser libraries don't seem to be installed. To fix: 
git clone https://github.com/alanruttenberg/ontology-browser.git
cd ontology-browser
make
")))
#+end_src

*** Compute the name of the ontology index

~ontology-page~ returns two values
- The pathname to the ontology index
- The ontology name as understood by OWLDoc.

#+begin_src lisp 
(defun ontology-page (owldoc-directory)
  (let ((page (namestring (car (remove "root" (directory (format nil "~aontologies/*__*" owldoc-directory))
                                       :test (lambda(a b) (search a (namestring b))))))))
    (values page (subseq (pathname-name page) 0 (position #\_ (pathname-name page) :test 'char=)))))
#+end_src

*** Adjust indices and delete superfluous ones.

1. Use sed to rewrite index.html in all of the files to index-<ontology>.html
2. Delete the top-level indices 
3. Rename the ontology-specific index file in ontologies/ to index-<ontology-name>.html
4. Create a new top-level index.html that just redirects to the ontology summary view.

#+begin_src lisp 
(defun fix-indices (owldoc-directory)
  (multiple-value-bind (page prefix)
      (ontology-page owldoc-directory)
    (uiop::run-program (format nil "find ~a -name \\*html | xargs sed -i '' s/index.html/index-~a.html/" owldoc-directory prefix))
    (rename-file page (merge-pathnames (format nil "index-~a.html" prefix) page))
    (delete-file (merge-pathnames "contents.html" owldoc-directory))
    (delete-file (merge-pathnames "index-all.html" owldoc-directory))
    (mapcar 'delete-file (directory (merge-pathnames "*/index.html" owldoc-directory)))
    (with-open-file (f (merge-pathnames "index.html" owldoc-directory) :direction :output)
      (format f "<html><head><meta http-equiv=\"refresh\" content=\"0; url='ontologies/index-~a.html\"/></head></html>\"" prefix))))
#+end_src

** Create the OWLDoc

The libraries take URLs as the locations, so convert the pathnames to file: URLs.
optionShowMiniHierarchies tells the library to generate hierarchy trees.

#+begin_src lisp 
(defun create-owldoc (ontology owldoc-directory)
  (maybe-load-owldoc-library)
  (let ((onturl (format nil "file:///~a" (namestring (truename ontology)))))
    (if (not (#"matches" owldoc-directory ".*/$"))
        (setq owldoc-directory (concatenate 'string owldoc-directory "/")))
    (ensure-directories-exist owldoc-directory)
    (assert (not (probe-file (merge-pathnames "index.html" owldoc-directory))) ()
            "There's already content in the OWLDoc directory. Delete it or use another destination")
    (let ((desturl (format nil "file:///~a" (namestring (truename owldoc-directory)))))
      (let* ((source (#"create" 'java.net.URI onturl))
             (base (new 'URL "http://example.com/"))
             (kit (new 'OWLHTMLKitImpl "core" base)))
        (#"setBoolean" (#"getHTMLProperties" kit) #1"OWLHTMLProperty.optionShowMiniHierarchies" +true+)
        ;; use SubClassOf vs subset-of-or-equal-to symbols
        (set-java-field 'org.coode.html.renderer.OWLHTMLVisitor "USE_SYMBOLS" nil t)
        (#"loadOntology" (#"getOWLServer" kit) source)
        (let ((exporter (new 'ontologyexporter kit))
              (target (new 'file (#"create" 'java.net.URI desturl))))
          (#"export" exporter target)
          (fix-indices owldoc-directory)
          )))))
#+end_src


# Leave this at bottom of file
# Local Variables:
# eval: (setf (cdr (assoc :results org-babel-default-header-args)) "none")
# eval: (pushnew '(:results . "wrap") org-babel-default-header-args :test 'equalp)
# eval: (add-hook 'after-save-hook 'org-html-export-to-html nil t)
# End:

