(defvar *owlapi-v3-syntax-renderers*
  '((:manchester uk.ac.manchester.cs.owl.owlapi.mansyntaxrenderer.ManchesterOWLSyntaxRenderer)
    (:functional org.coode.owlapi.functionalrenderer.OWLFunctionalSyntaxRenderer )
    (:xml org.coode.owlapi.owlxml.renderer.OWLXMLRenderer)
    (:rdfxml org.coode.owlapi.rdf.rdfxml.RDFXMLRenderer)
    (:krss de.uulm.ecs.ai.owlapi.krssrenderer.KRSS2OWLSyntaxRenderer)
    (:turtle org.coode.owlapi.turtle.TurtleRenderer)))

(defun to-owl-syntax-v3 (ont syntax &optional dest)
  (let ((manager (if (v3kb-p ont)
		     (v3kb-manager ont)
		     (#"getOWLOntologyManager" ont)))
	(ont (if (v3kb-p ont)
		 (v3kb-ont ont)
		 ont)))
    (let ((writer nil))
      (cond ((null dest) (setq writer (new 'stringwriter)))
	    ((and (java-object-p dest) 
		  (jclass-superclass-p (find-java-class 'io.writer ) (jobject-class dest)))
	     (setq writer dest))
	    ((and (stringp dest)
		  (setq writer (new 'filewriter (new 'file dest)))))
	    (t (error "don't know how to write to ~a" dest)))
      (ecase syntax
	((:turtle)
	 (let ((format (new 'org.semanticweb.owlapi.io.RDFXMLOntologyFormat)))
	   (#"setAddMissingTypes" format nil)
	   (#"render" (new (second (assoc syntax *owlapi-syntax-renderers*)) ont manager writer format))))
	((:rdfxml)
	 (let ((format (new 'org.semanticweb.owlapi.io.RDFXMLOntologyFormat)))
	   (#"setAddMissingTypes" format nil)
	   (#"render" (new (second (assoc syntax *owlapi-syntax-renderers*)) manager ont writer format))))
	((:manchester :functional :xml :krss)
	 (let ((renderer (second (assoc syntax *owlapi-syntax-renderers*))))
	   (#"render" (new renderer manager) ont writer))))
      (#"close" writer)
      (if (null dest)
	  (#"toString" writer)
	  dest))))
