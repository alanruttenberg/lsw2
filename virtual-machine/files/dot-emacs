;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.

(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.org/packages/")))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))
(if (not (package-installed-p 'company))
    (package-install 'company))


(require 'cl)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(browse-url-browser-function (quote browse-url-safari))
 '(comint-process-echoes nil nil nil "This was breaking control-c control-c in shell, causing shell command to wait for output")
 '(compilation-always-kill t)
 '(completion-ignored-extensions
   (quote
    (".DS_Store" ".svn/" "CVS/" ".o" "~" ".bin" ".lbin" ".fasl" ".ufsl" ".a" ".ln" ".blg" ".bbl" ".elc" ".lof" ".glo" ".idx" ".lot" ".dvi" ".fmt" ".tfm" ".pdf" ".class" ".fas" ".lib" ".x86f" ".sparcf" ".lo" ".la" ".toc" ".log" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".cps" ".fns" ".kys" ".pgs" ".tps" ".dfsl-65341" ".vrs" ".ppcf" ".dfsl" ".fasl" ".abcl")))
 '(cperl-break-one-line-blocks-when-indent nil)
 '(cperl-font-lock t)
 '(cperl-invalid-face (quote cperl-array-face))
 '(dabbrev-ignored-buffer-regexps (quote (".*\\.owl")))
 '(explicit-shell-file-name "/bin/bash")
 '(fill-column 120)
 '(font-lock-global-modes
   (quote
    (not speedbar-mode slime-inspector-mode slime-repl-mode sldb-mode slime-xref-mode)))
 '(grep-command "grep -nHrsi -e ")
 '(iswitchb-prompt-newbuffer nil)
 '(message-log-max 1000)
 '(org-confirm-babel-evaluate nil)
 '(sldb-enable-styled-backtrace t)
 '(sldb-show-catch-tags nil)
 '(slime-autodoc-use-multiline-p t)
 '(slime-compilation-finished-hook nil)
 '(slime-conservative-indentation nil)
 '(slime-ed-use-dedicated-frame nil)
 '(slime-edit-definition-dwim t)
 '(slime-enable-evaluate-in-emacs t)
 '(slime-repl-enable-presentations nil)
 '(slime-startup-animation nil)
 '(slime-truncate-lines t)
 '(slime-when-complete-filename-expand t)
 '(sql-sqlite-program "sqlite3")
 '(tags-case-fold-search t)
 '(tool-bar-mode nil)
 '(vc-follow-symlinks nil))

(defun home-relative-load-path (string)
  (add-to-list 'load-path (concat (getenv "HOME") "/" string) t))

(home-relative-load-path "emacs/")

;(load "grep-default-file-arg.el")

;(add-to-list 'default-frame-alist '(width . 150))
;(add-to-list 'default-frame-alist '(height . 72))
;(add-to-list 'default-frame-alist '(top . 20))
;(add-to-list 'default-frame-alist '(left . 0))

(load "~/emacs/slime-init.el")

(require 'dabbrev)
(defvar *max-dabbrev-buffer-length* 10000000)
(defun dabbrev--select-not-too-large-buffers ()
  (remove-if (lambda(b) (> (buffer-size b) *max-dabbrev-buffer-length*)) (dabbrev--select-buffers)))
(setq dabbrev-select-buffers-function 'dabbrev--select-not-too-large-buffers)

;(setq debug-on-error t)
(ignore-errors
  (dynamic-completion-mode t))
(ignore-errors
  (dynamic-completion-mode))

;(require 'company)
(global-set-key [C-tab] 'dabbrev-expand)
;(add-hook 'after-init-hook 'global-company-mode)
;; https://github.com/anwyn/slime-company
;(define-key company-active-map "\e" 'company-abort)
;(define-key company-active-map (kbd "\C-n") 'company-select-next)
;(define-key company-active-map (kbd "\C-p") 'company-select-previous)
;(define-key company-active-map (kbd "\C-d") 'company-show-doc-buffer)

(setenv "ABCL_RAM" "4096")
;; if I'm running zsh, run-program in abcl fails
(setenv "SHELL" "/bin/bash")

(setq visible-bell t)
(iswitchb-mode)
(load "/Users/alanr/emacs/ascii-characters.elc" t)
(require 'font-indent)

;(require 'frame-cmds)
;; (when (boundp 'x-sent-selection-hooks)
;;   (toggle-max-frame-vertically)
;;  (enlarge-frame-horizontally 20))
(recentf-mode 1)

(global-set-key [M-mouse-2] 'insert-x-selection)
; X11

(if (fboundp 'tool-bar-mode)
    (tool-bar-mode 0))

;; grrr. this is the best you can do for C-`?
(if (fboundp 'ns-next-frame)
    (global-set-key [67108960] 'ns-next-frame))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 94 :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))
'(cperl-array ((t (:foreground "black"))))
 '(cperl-hash ((t (:foreground "black"))))
 '(cperl-nonoverridable ((((class color) (background light)) (:foreground "DarkSlateBlue" :weight bold))))
 '(cursor ((t (:background "red" :foreground "white"))))
 '(font-lock-builtin-face ((t (:foreground "black"))))
 '(font-lock-comment-face ((t (:foreground "darkslateblue" :weight bold))))
 '(font-lock-constant-face ((t (:foreground "black"))))
 '(font-lock-doc-face ((t (:inherit font-lock-string-face :foreground "DarkBlue"))))
 '(font-lock-function-name-face ((((class color) (background light)) (:foreground "red" :weight bold))))
 '(font-lock-keyword-face ((t (:foreground "blue"))))
 '(font-lock-string-face ((t (:foreground "black"))))
 '(font-lock-type-face ((t (:foreground "red" :weight bold))))
 '(font-lock-variable-name-face ((t (:weight bold))))
 '(font-lock-warning-face ((t (:foreground "red4" :weight bold))))
 '(highlight ((((class color) (background light)) (:foreground "red" :box (:line-width 1 :color "black") :weight bold))))
 '(isearch ((((class color) (background light)) (:background "yellow" :foreground "black" :weight bold))))
 '(lazy-highlight ((((class color) (background light)) (:background "yellow"))))
 '(show-paren-match ((t (:background "LightYellow1" :foreground "DeepPink1" :weight bold))))
 '(sldb-condition-face ((t (:foreground "DarkSlateGray" :weight bold))))
 '(sldb-detailed-frame-line-face ((t (:foreground "brown" :weight bold :height 1.2))))
 '(sldb-label-face ((t nil)))
 '(sldb-local-name-face ((t (:weight bold))))
 '(sldb-restart-face ((t (:foreground "DarkBlue" :weight bold))))
 '(sldb-restart-number-face ((t (:underline t :weight bold))))
 '(sldb-restart-type-face ((t (:foreground "DarkSlateGrey" :weight bold))))
 '(sldb-section-face ((t (:weight bold :height 1.2))))
 '(sldb-selected-frame-line-face ((t (:foreground "brown" :weight bold :height 1.2))))
 '(sldb-topline-face ((t (:foreground "brown" :weight bold :height 1.2))))
 '(slime-inspector-action-face ((t (:foreground "Dark Blue" :slant italic))))
 '(slime-inspector-label-face ((t (:weight bold))))
 '(slime-inspector-strong-face ((t (:inherit slime-inspector-label-face :foreground "blue"))))
 '(slime-inspector-topline-face ((t (:foreground "brown" :weight bold :height 1.2))))
 '(slime-inspector-type-face ((t (:foreground "DarkRed" :weight bold))))
 '(slime-repl-inputed-output-face ((((class color) (background light)) (:slant italic))))
 '(slime-repl-output-mouseover-face ((t (:foreground "DarkRed"))))
 '(slime-repl-prompt-face ((t (:inherit font-lock-keyword-face :foreground "red"))))
 '(underline ((t nil)))
 '(vhdl-font-lock-attribute-face ((((class color) (background light)) nil)))
 '(vhdl-font-lock-directive-face ((((class color) (background light)) nil)))
 '(vhdl-font-lock-reserved-words-face ((t nil))))

(setq-default major-mode
              (lambda () (if buffer-file-name
			          (fundamental-mode)
			      (let ((buffer-file-name (buffer-name)))
				     (set-auto-mode)))))

(setq auto-mode-alist
      (union '(("\\.system$" . lisp-mode)
	       ("\\.asd$" . lisp-mode)
	       ("\\.translations$" . lisp-mode)
	       ("\\.cl$" . lisp-mode)
	       ("\\.lisp$" . lisp-mode)
	       ("\\.snark$" . lisp-mode)
	       )
	           auto-mode-alist :test 'equalp))

(setq resize-mini-windows nil)
(setq enable-local-eval t)
(setq backup-directory-alist '(("." . "~/emacs-backup-directory/")))

(add-hook 'lisp-mode-hook 'alanr-lisp-mode-hook)





(setq kill-ring-max 1000)

(modify-syntax-entry ?@ "_" lisp-mode-syntax-table)

;(compile-load "~/lisp/emacs-clos-help")

; for max os x X11 problem with modmap changes
(defun insert-x-selection()
  (interactive)
  (insert-string (x-get-selection)))

(global-set-key [M-mouse-2] 'insert-x-selection)

(defun log ()
  (interactive)
  (find-file "~/personal/personal.txt")
  (find-file-other-window "~/personal/log.txt"))


(setq inhibit-startup-message t)        ;no splash screen

(setq common-lisp-hyperspec-root "http://www.lispworks.com/documentation/HyperSpec/")
(global-set-key "h" 'hyperspec-lookup)

(defun filter-some-buffers ()
    (setq iswitchb-buflist
	    (remove-if (lambda(e) (string-match ".*Minibuf-.*" e))
		            iswitchb-buflist))
    )

(add-hook 'iswitchb-make-buflist-hook 'filter-some-buffers)

(put 'narrow-to-region 'disabled nil)

(put 'downcase-region 'disabled nil)


(defun ns-insert-filename ()
  "Insert filename, quoted"
  (interactive)
  (let ((f))
    (setq f (car ns-input-file))
    (setq ns-input-file (cdr ns-input-file))
    (push-mark (+ (point) (progn (insert "\"" f "\"") (+ (length f) 2))))))

(define-key global-map [drag-n-drop] 'ns-insert-filename)
(define-key global-map [S-ns-drag-file] 'ns-insert-filename)
;(define-key comint-mode-map [ns-drag-file] 'S-ns-ns-insert-filename)
(global-set-key "h" 'hyperspec-lookup)

(defun filter-some-buffers ()
    (setq iswitchb-buflist
	    (remove-if (lambda(e) (string-match ".*Minibuf-.*" e))
		            iswitchb-buflist))
    )

(add-hook 'iswitchb-make-buflist-hook 'filter-some-buffers)

(put 'narrow-to-region 'disabled nil)

(put 'downcase-region 'disabled nil)

(setq sql-server "ct1.sdm.buffalo.edu")
(setq sql-user "ontology")
(setq sql-password "D3nta10nt010gy")
(setq sql-database "ClinicTest")
(setq ms-sql-options '("-cp" "/Volumes/Big/Downloads/2011-01-25/jisql-2.0.8/build/jisql-2.0.8/lib/jisql-2.0.8.jar:/Volumes/Big/Downloads/2011-01-13/sqljdbc_3.0/enu/sqljdbc4.jar" "com.xigole.util.sql.Jisql" "-user" "ontology" "-password" "D3nta10nt010gy" "-driver" "mssql" "-cstring" "jdbc:sqlserver://ct1.sdm.buffalo.edu:14330;instanceName=TX2;databaseName=ClinicTest"))

(defun sql-connect-ms ()
  "Create comint buffer and connect to Microsoft using the login
parameters and command options."
  ;; Put all parameters to the program (if defined) in a list and call
  ;; make-comint.
  (interactive)
    (set-buffer (apply 'make-comint "SQL" "java"
		              nil ms-sql-options)))

(fset 'number-next-axiom
   [?\C-s ?_ ?\C-b ?\C-d escape ?x ?i ?n ?s ?e ?r ?t ?  ?r ?e ?  return ?a ?\M-x ?i ?n ?c ?r ?e ?  ?m ?  ?r ?e ?  return ?a])

(defun ns-insert-filename ()
  "Insert filename, quoted"
  (interactive)
  (let ((f))
    (setq f (car ns-input-file))
    (setq ns-input-file (cdr ns-input-file))
    (push-mark (+ (point) (progn (insert "\"" f "\"") (+ (length f) 2))))))

(define-key global-map [drag-n-drop] 'ns-insert-filename)
(define-key global-map [S-ns-drag-file] 'ns-insert-filename)
;(define-key comint-mode-map [ns-drag-file] 'S-ns-ns-insert-filename)
(global-set-key "" 'find-file-maybe-recent)

(defun find-file-maybe-recent (arg)
  (interactive "P")
  (if arg
      (call-interactively 'recentf-open-files)
    (call-interactively 'find-file)))

(require 'server)
(if (not (eq t (server-running-p "server")))
    (server-start))
    
;;If your fingers are wired to using C-x k to kill off buffers (and you dont like having to type C-x #) then try this :
;; http://www.emacswiki.org/emacs/EmacsClient#toc35

(add-hook 'server-switch-hook 
            (lambda ()
              (when (current-local-map)
                (use-local-map (copy-keymap (current-local-map))))
              (local-set-key (kbd "C-x k") 'server-edit)))

(defun only-newline ()
  (interactive)
  (let ((post-self-insert-hook nil))
    (newline)))

(global-set-key (kbd "C-S-m") 'only-newline)
  
(defun bf-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t) 
        (backward-char) (insert "\n"))
      (indent-region begin end))
    (message "Ah, much better!"))


(defun find-file-maybe-recent (arg)
  (interactive "P")
  (if arg
      (call-interactively 'recentf-open-files)
    (call-interactively 'find-file)))

(require 'server)
(if (not (eq t (server-running-p "server")))
    (server-start))
    
;;If your fingers are wired to using C-x k to kill off buffers (and you dont like having to type C-x #) then try this :
;; http://www.emacswiki.org/emacs/EmacsClient#toc35

(add-hook 'server-switch-hook 
            (lambda ()
              (when (current-local-map)
                (use-local-map (copy-keymap (current-local-map))))
              (local-set-key (kbd "C-x k") 'server-edit)))

(defun only-newline ()
  (interactive)
  (let ((post-self-insert-hook nil))
    (newline)))

(global-set-key (kbd "C-S-m") 'only-newline)
  
(defun bf-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t) 
        (backward-char) (insert "\n"))
      (indent-region begin end))
    (message "Ah, much better!"))
  
(defun insert-time-stamp ()
  (interactive)
  (require 'time-stamp)
  (insert (time-stamp-string)))

;; what a pain in the ass
(defadvice archive-write-file-member (around nocomplain)
  (let ((buffer (current-buffer)))
    (with-current-buffer archive-superior-buffer
      (setq save buffer-undo-list buffer-undo-list t)
      (with-current-buffer buffer
      ad-do-it))))

;(ad-unadvise 'archive-write-file-member)
;(ad-activate 'archive-write-file-member)
    
(add-hook 'archive-mode-hook 'set-archive-no-undo-while-revert)

(defun set-archive-no-undo-while-revert ()
  (define-key archive-mode-map "g" 'revert-archive-no-undo)
  (ad-activate 'archive-write-file-member)
  )

(defun revert-archive-no-undo (&rest ignore)
  (interactive)
  (message (concat "buffer:" (buffer-name (current-buffer))))
  (with-current-buffer (or (and (boundp 'archive-superior-buffer) archive-superior-buffer) (current-buffer))
    (let ((buffer-undo-list t))
      (apply 'revert-buffer ignore)
      )))


;; Allow editing of binary .plist files.
(add-to-list 'jka-compr-compression-info-list
             ["\\.plist$"
              "converting text XML to binary plist"
              "plutil"
              ("-convert" "binary1" "-o" "-" "-")
              "converting binary plist to text XML"
              "plutil"
              ("-convert" "xml1" "-o" "-" "-")
              nil nil "bplist"])

(org-babel-do-load-languages
 'org-babel-load-languages
 '((lisp . t)))

(defun insert-time-stamp ()
  (interactive)
  (require 'time-stamp)
  (insert (time-stamp-string)))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((lisp . t)))

;;It is necessary to perform an update!
(jka-compr-update)
