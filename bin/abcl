#!/bin/bash
# r=ram, s=stack, j=java, g=verbose gc, c=trace class loading, d=wait for jdi. Environment variables if not command line args.
ulimit -s 32768
ram="-Xmx1024m"
stack="-Xss24m"
java=java
shopt -s extglob
lisp=()
args=("$@")
unprocessed_args=()

while ([ "${#args[@]}" -gt 0 ] ); do
    case "$1" in
	#options
        -r) ram="-Xmx$2m"  ; shift ; shift ;;
  	-s) stack="-Xss$2m"  ; shift ; shift ;;
	-j) java="$2"   ; shift ; shift ;;
        -help) usage ; exit 0 ;;

	# switches 
	-g) gc=("-XX:${OPTARG}\PrintGCDetails" "-XX:${OPTARG}PrintGCTimeStamps")  ; shift  ;;
	-c) cl=("-XX:${OPTARG}\TraceClassLoading" "-XX:${OPTARG}TraceClassUnloading")   ; shift ;;
	-d) debug=("-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000" "-XX:-OmitStackTraceInFastThrow")  ; shift  ;;
	-h) usage ; exit 0 ;; 

	# ABCL switches and options
        --noinform) lisp+=("$1") ; shift ;;
        --noinit) lisp+=("$1") ; shift ;;
        --nosystem) lisp+=("$1") ; shift ;;
        --batch) lisp=("$1") ; shift ;;
	--eval) lisp+=("$1" "$2") ; shift; shift ;;
 	--load) lisp+=("$1" "$2") ; shift; shift ;;
        --load-system-file) lisp+=("$1" "$2") ; shift ; shift ;;

	# any arguments past -- are passed to lisp
	--) shift; unprocessed_args+=("$@") ; break ;;

	# anything else just pass on to lisp 
        *) unprocessed_args+=("$1") ; shift ;;
    esac
    args=("$@")
done
shopt -u extglob


if [ -n "${ABCL_JDI}" ]
then
    dbg=("-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000" "-XX:-OmitStackTraceInFastThrow") 
fi
 
# Either use ABCL_WD, or figure out where with are using $0. Latter works 
# on both on cygwin and os x

if [ -z "${ABCL_WD}" ]
then
    here=`echo $0 | sed 's/[^/]*$//g'`..
else
    here=${ABCL_WD}
fi

if [ -n "${ABCL_VERBOSEGC}" ]
then
    gc=("-XX:${ABCL_VERBOSEGC}PrintGCDetails" "-XX:{ABCL_VERBOSEGC}PrintGCTimeStamps") 
fi

if [ -n "${ABCL_CLASSLOADING}" ] 
then
    cl=("-XX:${ABCL_CLASSLOADING}TraceClassLoading" "-XX:{ABCL_CLASSLOADING}TraceClassUnloading") 
fi

if [ -n "${ABCL_RAM}" ]
then
    ram="-Xmx${ABCL_RAM}m"
fi

if [ -n "${ABCL_STACK}" ] 
then
    stack="-Xss${ABCL_STACK}m" 
fi

if [ -n "${ABCL_JAVA}" ] 
then
    java=${ABCL_JAVA}
fi
  
read -r -a version <<EOF
`java -version 2>&1 | head -1 | tr -d '\n' | tr -d '"'`
EOF
versionwhole="${version[2]}"
versionregex="([0-9]+).([0-9]+)"
if [[ $versionwhole =~ $versionregex ]]
then
    version="${BASH_REMATCH[1]}";
    if [[ $version == 1 ]]
    then
	version="${BASH_REMATCH[2]}";
    fi

else
    versionregex="([0-9][0-9])"
    if [[ $versionwhole =~ $versionregex ]]
    then
    version="${BASH_REMATCH[1]}";
fi
fi

sep="================================================================"

if [[ ${OS} =~  windows ]]
then
    pathjoin=";"
else
    pathjoin=":"
fi

function complainCantTellVersion {
    echo "I'm trying to tell which version of java you are running, but \"$java -version\" prints"
    echo $sep
    echo `java -version`
    echo $sep
    echo "Going to try anyways, but this may not work..."
 }


if [ -z $version ]
then
    complainCantTellVersion
fi

if [ $version == 7 ]
then
    permgen=("-XX:MaxPermSize=128M" "-XX:+CMSClassUnloadingEnabled" )
fi

if [ $version == "17" ]
then
    addopen=("--add-opens" "java.base/java.util=ALL-UNNAMED" "--add-opens" "java.base/java.security=ALL-UNNAMED" )
fi
if [ $version == "11" ]
then
    addopen=("--add-opens" "java.base/java.util=ALL-UNNAMED" "--add-opens" "java.base/java.security=ALL-UNNAMED" )
fi
		   
read -r -a libs  <<< `find $here/lib -follow -name \*\.jar`

classpath=`echo "${libs[@]}" | sed 's/[ ]/'$pathjoin/g`

if [ -n "${ABCL_PROFILE_SHARK}" ]
then
    profileargs=("-XrunShark")
fi
   
if [[ `uname` =~ Darwin ]]
then
    dock=("-Xdock:icon=$here/images/lswicon.icns" "-Xdock:name='ABCL'")
fi

args=($ram $stack ${dbg[@]} ${gc[@]} ${profileargs[@]} ${dock[@]})

if ! [[ ${OS} =~ Windows ]]
then
    args=("-server" ${args[@]})
fi

args=("-Dfile.encoding=UTF-8" ${args[@]})
echo "java -version says: $versionwhole"
#echo "lisp args: ${lisp[@]}"

CLASSPATH=$classpath
export CLASSPATH

echo "CLASSPATH=$classpath"
command=($java "${args[@]}"  "${permgen[@]}" "${cl[@]}" "${addopen[@]}" "org.armedbear.lisp.Main"  "${lisp[@]}" "${unprocessed_args[@]}")

echo "${command[@]}"

exec "${command[@]}"

