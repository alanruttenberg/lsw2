#!/bin/bash
# r=ram, s=stack, b=bits, j=java, g=verbose gc, c=trace class loading, d=wait for jdi. Environment variables if not command line args.

bits="-d32"
gc=("-XX:-PrintGCDetails" "-XX:-PrintGCTimeStamps") 
cl=("-XX:-TraceClassLoading" "-XX:-TraceClassUnloading")
ram="-Xmx1024m"
stack="-Xss24m"
java=java

while getopts r:s:b:j:g:c:d: option
do
 case "${option}"
 in
     r) ram="-Xmx${OPTARG}m" ; shift 2 ;;
     s) stack="-Xss${OPTARG}m" ; shift 2 ;;
     b) bits="-d${OPTARG}"  ; shift 2 ;;
     j) java="${OPTARG}"  ; shift 2 ;;
     g) gc=("-XX:${OPTARG}\PrintGCDetails" "-XX:${OPTARG}PrintGCTimeStamps")   ; shift ;;
     c) cl=("-XX:${OPTARG}\TraceClassLoading" "-XX:${OPTARG}TraceClassUnloading")   ; shift ;;
     d) debug=("-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000" "-XX:-OmitStackTraceInFastThrow")  ; shift  ;;
     q) verbosity=("-q")  ; shift  ;;
 esac
done

if [ -z "${ABCL_BITS}" ]
then
    bits="-d${ABCL_BITS}"
fi

if [ -n "${ABCL_JDI}" ]
then
    dbg=("-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000" "-XX:-OmitStackTraceInFastThrow") 
fi
echo debug $dbg
 
# Either use ABCL_WD, or figure out where with are using $0. Latter works 
# on both on cygwin and os x

if [ -z "${ABCL_WD}" ]
then
    here=`echo $0 | sed 's/[^/]*$//g'`..
else
    here=${ABCL_WD}
fi

if [ -n "${ABCL_VERBOSEGC}" ]
then
    gc=("-XX:${ABCL_VERBOSEGC}PrintGCDetails" "-XX:{ABCL_VERBOSEGC}PrintGCTimeStamps") 
fi

if [ -n "${ABCL_CLASSLOADING}" ] 
then
    cl=("-XX:${ABCL_CLASSLOADING}TraceClassLoading" "-XX:{ABCL_CLASSLOADING}TraceClassUnloading") 
fi

if [ -n "${ABCL_RAM}" ]
then
    ram="-Xmx${ABCL_RAM}m"
fi

if [ -n "${ABCL_STACK}" ] 
then
    stack="-Xss${ABCL_STACK}m" 
fi

if [ -n "${ABCL_JAVA}" ] 
then
    java=${ABCL_JAVA}
fi
  
read -r -a version <<<`$java -version 2>&1 | head -1 | tr -d '\n' | tr -d '"'`
versionwhole=${version[2]}
versionregex="1.([0-9]).*"
if [[ $versionwhole =~ $versionregex ]]
then
    version=${BASH_REMATCH[1]};
else
    unset version
fi

sep="================================================================"

if [[ ${OS} =~  windows ]]
then
    pathjoin=";"
else
    pathjoin=":"
fi

function complainCantTellVersion {
    echo "I'm trying to tell which version of java you are running, but \"$java -version\" prints"
    echo $sep
    echo `java -version`
    echo $sep
    echo "Going to try anyways, but this may not work..."
 }

function complainWrongVersion {
    echo "This project needs java 1.5-1.9 but \"$java -version\" prints"
    echo $sep
    echo `java -version`
    echo $sep
   echo "You either need to install a working java version, and/or first set the"
   echo "environment variable ABCL_JAVA to the appropriate java executable (e.g."
   echo "e.g in Mac OS X:/Library/Java/JavaVirtualMachines/<version>/Contents/Home/bin/java)"
 }

if [ -z $version ]
then
    complainCantTellVersion
elif ! [[ $version  =~ [5-9] ]]
then
    complainWrongVersion
fi

if [ verion == 7 ]
then
    permgen=("-XX:MaxPermSize=128M" "-XX:+CMSClassUnloadingEnabled" )
fi

if ! [[ $version =~ [56] ]]
then
    bits="-d64" 
fi
		   
   read -r -a libs  <<< `find $here/lib -follow -name \*\.jar`

classpath=`echo "${libs[@]}" | sed 's/[ ]/'$pathjoin/g`

if [ -n "${ABCL_PROFILE_SHARK}" ]
then
    profileargs=("-XrunShark")
fi
   
if [[ `uname` =~ Darwin ]]
then
    dock=("-Xdock:icon=$here/images/lswicon.icns" "-Xdock:name='ABCL'")
fi

args=($ram $stack $bits ${dbg[@]} ${gc[@]} ${cl[@]} ${profileargs[@]} ${dock[@]})

if ! [[ ${OS} =~ Windows ]]
then
    args=("-server" ${args[@]})
fi

echo "java -version says: $versionwhole"
echo "lisp args: $*"

CLASSPATH=$classpath
export CLASSPATH

echo "CLASSPATH=$classpath"

shift

command=($java ${args[@]} ${permgen[@]} "org.armedbear.lisp.Main" ${verbosity[@]} "--load" "$here/scripts/system-registry.lisp" $*)

echo ${command[@]}

exec ${command[@]}

