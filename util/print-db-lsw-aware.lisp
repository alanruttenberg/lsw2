(defun print-db-aux (forms)
  (setq forms (eval-uri-reader-macro forms))
  (loop for hook in *print-db-hooks*
     do (setq forms (funcall hook forms)))
  (when forms
    (cond ((stringp (car forms))
	   `((print ',(car forms) *trace-output*)
	     ,@(print-db-aux (cdr forms))))
	  ((and (consp (car forms)) 
		(consp (caar forms)) 
		(eq (caaar forms) 'lambda)
		(eq (car (third (caar forms))) 'invoke-restargs))
	   `((format *trace-output* "~&~%(#~s ~a) " ,(second (third (caar forms))) ,(second (car forms)))
	     (prin1 ,(car forms) *trace-output* )
	       ,@(print-db-aux (cdr forms))))
	  ((null (cdr forms))
	   `((print ',(car forms) *trace-output*)
	     (let ((values (multiple-value-list ,(car forms))))
	       (prin1 (car values) *trace-output*)
	       (apply #'values values))))
	  (t `((print ',(car forms) *trace-output*)
	       (prin1 ,(car forms) *trace-output*)
	       ,@(print-db-aux (cdr forms)))))))
